apiVersion: v1
kind: Namespace
metadata:
  name: landing-zone-ai
  labels:
    name: landing-zone-ai
    app.kubernetes.io/name: landing-zone-ai
    app.kubernetes.io/component: platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: landing-zone-ai-portal
  namespace: landing-zone-ai
  labels:
    app: landing-zone-ai-portal
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: landing-zone-ai-portal
  template:
    metadata:
      labels:
        app: landing-zone-ai-portal
        version: v1
    spec:
      serviceAccountName: landing-zone-ai-portal
      containers:
      - name: portal
        image: {{IMAGE_TAG}}
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        - name: ASPNETCORE_URLS
          value: "http://+:8080"
        - name: Azure__TenantId
          valueFrom:
            secretKeyRef:
              name: azure-credentials
              key: tenant-id
        - name: Azure__ClientId
          valueFrom:
            secretKeyRef:
              name: azure-credentials
              key: client-id
        - name: Azure__ClientSecret
          valueFrom:
            secretKeyRef:
              name: azure-credentials
              key: client-secret
        - name: Azure__DefaultSubscriptionId
          valueFrom:
            secretKeyRef:
              name: azure-credentials
              key: subscription-id
        - name: ApplicationInsights__ConnectionString
          valueFrom:
            secretKeyRef:
              name: application-insights
              key: connection-string
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: landing-zone-ai-portal
  namespace: landing-zone-ai
  labels:
    app: landing-zone-ai-portal
spec:
  selector:
    app: landing-zone-ai-portal
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: landing-zone-ai-portal
  namespace: landing-zone-ai
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - landing-zone-ai-portal.example.com
    secretName: landing-zone-ai-portal-tls
  rules:
  - host: landing-zone-ai-portal.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: landing-zone-ai-portal
            port:
              number: 80